/* This file includes common functions which 
some of all benchmarks use.
*/

#ifndef __MY_COMMON_H__
#define __MY_COMMON_H__

#include "timing.h"
#include "deadline_big.h"
#include "deadline_little.h"
//constant
#define MILLION 1000000L
#define ERROR_DEFINE -1

//manually set below
#define CORE 1 //0:LITTLE, 1:big

#define DELAY_EN 1 //0:delay off, 1:delay on

#define GET_PREDICT 0 //to get prediction equation
#define GET_OVERHEAD 0 // to get execution deadline
#define GET_DEADLINE 0 //to get overhead deadline
#define PREDICT_EN 0 //0:prediction off, 1:prediction on
#define ORACLE_EN 1 //0:oracle off, 1:oracle on
#define PID_EN 0 //0:pid off, 1:pid on

#define DEBUG_EN 0 //debug information print on/off

#define SWEEP (100) //sweep deadline (e.g, if 90, deadline*0.9)

//always set this as 1 on ODROID
#define DVFS_EN 1 //1:change dvfs, 1:don't change dvfs (e.g., not running on ODROID)

//automatically set
#define MAX_FREQ ((CORE)?(2000000):(1400000))

#define _pocketsphinx_ 0 
#define _stringsearch_ 0
#define _sha_preread_ 0
#define _rijndael_preread_ 0
#define _xpilot_slice_ 0
#define _2048_slice_ 0
#define _curseofwar_slice_ 0
#define _uzbl_ 1

struct timeval start, end, moment;
int slice_time = 0;
int dvfs_time = 0;

FILE *fp_max_freq; //File pointer scaling_max_freq

int check_define(void){
    int flag_cnt = 0;
    int bench_cnt = 0;

    if(GET_PREDICT)     {flag_cnt++;}
    if(GET_OVERHEAD)    {flag_cnt++;}
    if(GET_DEADLINE)    {flag_cnt++;}
    if(PREDICT_EN)      {flag_cnt++;}
    if(ORACLE_EN)       {flag_cnt++;}
    if(PID_EN)          {flag_cnt++;}

    if(_pocketsphinx_)      {bench_cnt++;}
    if(_stringsearch_)      {bench_cnt++;}
    if(_sha_preread_)       {bench_cnt++;}
    if(_rijndael_preread_)  {bench_cnt++;}
    if(_xpilot_slice_)      {bench_cnt++;}
    if(_2048_slice_)        {bench_cnt++;}
    if(_curseofwar_slice_)  {bench_cnt++;}
    if(_uzbl_)              {bench_cnt++;}

    if( (flag_cnt==0 && PREDICT_EN==0) || flag_cnt==1 || bench_cnt==1 )
        return 0;
    else
        return ERROR_DEFINE;
}

void fopen_all(void){
#if DVFS_EN
    #if CORE //big
        if(NULL == (fp_max_freq = fopen("/sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq", "w"))){
        printf("ERROR : FILE READ FAILED (SEE IF FILE IS PRIVILEGED)\n");
        return;
        }
    #else //LITTLE
        if(NULL == (fp_max_freq = fopen("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", "w"))){
        printf("ERROR : FILE READ FAILED (SEE IF FILE IS PRIVILEGED)\n");
        return;
    }
    #endif
#endif
    return;
}

void fclose_all(void){
#if DVFS_EN
   fclose(fp_max_freq);
#endif
    return;
}
void set_freq(float predicted_exec_time, int slice_time, int deadline_time, int avg_dvfs_time){
#if DVFS_EN
    int predicted_freq = MAX_FREQ;
       
    //calculate predicted freq and round up by adding 99999
    predicted_freq = 1.1 * predicted_exec_time * MAX_FREQ / (deadline_time - slice_time - avg_dvfs_time) + 99999;
    //if less then 200000, just set it minimum (200000)
    predicted_freq = (predicted_freq < 200000 || predicted_exec_time <= 1)?(200000):(predicted_freq);
    //set maximum frequency, because performance governor always use maximum freq.
    fprintf(fp_max_freq, "%d", predicted_freq);
    fflush(fp_max_freq);
#endif

    return;
}

void set_freq_uzbl(float predicted_exec_time, int slice_time, int deadline_time, int avg_dvfs_time){
#if DVFS_EN
    #if CORE //big
        if(NULL == (fp_max_freq = fopen("/sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq", "w"))){
        printf("ERROR : FILE READ FAILED (SEE IF FILE IS PRIVILEGED)\n");
        return;
        }
    #else //LITTLE
        if(NULL == (fp_max_freq = fopen("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", "w"))){
        printf("ERROR : FILE READ FAILED (SEE IF FILE IS PRIVILEGED)\n");
        return;
    }
    #endif
#endif
    int predicted_freq = MAX_FREQ;
       
    //calculate predicted freq and round up by adding 99999
    predicted_freq = 1.1 * predicted_exec_time * MAX_FREQ / (deadline_time - slice_time - avg_dvfs_time) + 99999;
    //if less then 200000, just set it minimum (200000)
    predicted_freq = (predicted_freq < 200000 || predicted_exec_time <= 1)?(200000):(predicted_freq);
    //set maximum frequency, because performance governor always use maximum freq.
    fprintf(fp_max_freq, "%d", predicted_freq);
#if DVFS_EN
    fclose(fp_max_freq);
#endif
    return;
}


void fprint_freq(void){
#if DVFS_EN
    FILE *fp_freq; //File pointer of freq of A7 (LITTLE) core or A15 (big) core power sensor file
    int khz; //Value (khz) at start point.

    FILE *time_file;
    time_file = fopen("times.txt", "a");
    #if CORE //big
        if(NULL == (fp_freq = fopen("/sys/devices/system/cpu/cpu4/cpufreq/scaling_cur_freq", "r"))){
            printf("ERROR : FILE READ FAILED\n");
            return;
        }
        fscanf(fp_freq, "%d", &khz);
        fprintf(time_file, "big core freq : %dkhz\n", khz);  
    #else //LITTLE
        if(NULL == (fp_freq = fopen("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq", "r"))){
            printf("ERROR : FILE READ FAILED (SEE IF FILE IS PRIVILEGED)\n");
            return;
        }
        fscanf(fp_freq, "%d", &khz);
        fprintf(time_file, "little core freq : %dkhz\n", khz);  
    #endif
        fclose(fp_freq);
    fclose(time_file); 
    return;
#endif
}

void print_freq(void){
#if DVFS_EN
    FILE *fp_freq; //File pointer of freq of A7 (LITTLE) core or A15 (big) core power sensor file
    int khz; //Value (khz) at start point.

    #if CORE //big
        if(NULL == (fp_freq = fopen("/sys/devices/system/cpu/cpu4/cpufreq/scaling_cur_freq", "r"))){
            printf("ERROR : FILE READ FAILED\n");
            return;
        }
        fscanf(fp_freq, "%d", &khz);
        printf("big core freq : %dkhz\n", khz);  
    #else //LITTLE
        if(NULL == (fp_freq = fopen("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq", "r"))){
            printf("ERROR : FILE READ FAILED (SEE IF FILE IS PRIVILEGED)\n");
            return;
        }
        fscanf(fp_freq, "%d", &khz);
        printf("little core freq : %dkhz\n", khz);  
    #endif
    fclose(fp_freq);
    return;
#endif
}
/*
 * PID-based prediction of execution time.
 */
#if _sha_preread_
    #define PID_P 0.200000
    #define PID_I 0.200000
    #define PID_D 0.000000
#endif
#if _xpilot_slice_
    #define PID_P 0.350000
    #define PID_I 0.000000
    #define PID_D 0.250000
#endif
#if _stringsearch_
    #define PID_P 0.300000
    #define PID_I 0.100000
    #define PID_D 0.000000
#endif
#if _2048_slice_
    #define PID_P 0.050000
    #define PID_I 0.700000
    #define PID_D 0.000000
#endif
#if _curseofwar_slice_
    #define PID_P 0.050000
    #define PID_I 0.900000
    #define PID_D 0.000000
#endif
#if _pocketsphinx_
    #define PID_P 0.400000
    #define PID_I 0.100000
    #define PID_D 0.250000
#endif
#if _uzbl_
    #define PID_P 0.050000
    #define PID_I 1.500000
    #define PID_D 0.000000
#endif
#if _rijndael_preread_
    #define PID_P 0.050000
    #define PID_I 0.200000
    #define PID_D 0.250000
#endif
float pid_controller(int last_time) {
  // Define variables
  float d_error;
  static float error = 0; // Absolute error
  static float i_error = 0; // Integrative error
  static float predicted_time = 0; // Saved prediction time

  // Calculate errors
  // Derivative is new error minus old error 
  d_error = (last_time - predicted_time) - error; 
  // Update error
  error = last_time - predicted_time;
  // Add to integrative error
  i_error += error;

  // Update prediction
  predicted_time = predicted_time + PID_P*error + PID_I*i_error + PID_D*d_error;

  return predicted_time;
}

//define exectuion time array for oracle
#if CORE //big
    #if _pocketsphinx_
    int exec_time_arr[50]= {2628965, 1263744, 1877792, 921323, 3359589, 2981796, 2301457, 2629482, 2705059, 1188716, 1893813, 2613509, 2193693, 805751, 2461022, 1152194, 2355681, 2429624, 1446942, 855293, 1246213, 1701739, 2295360, 3739205, 1643585, 921270, 2304967, 1888106, 1465200, 3283557, 1884156, 2326579, 1310348, 630040, 2801835, 985131, 1720021, 2955207, 3306166, 3122800, 2786696, 618042, 1258214, 1952552, 1132699, 614647, 576320, 1095123, 857723, 3038111};
    #endif

    #if _stringsearch_
    int exec_time_arr[1332]= {2488, 3087, 2493, 2347, 2919, 3026, 2483, 2583, 2781, 2556, 2672, 2816, 2737, 2759, 2281, 2400, 2686, 2279, 2257, 2390, 2191, 2334, 2886, 2330, 2621, 2486, 2247, 2366, 3236, 3337, 2267, 3086, 2275, 2346, 2226, 2586, 2287, 2456, 2527, 2326, 3183, 3638, 2246, 2591, 2651, 2536, 2641, 2286, 2281, 2498, 2794, 2386, 2451, 2346, 2322, 3066, 2482, 2466, 2308, 3022, 2421, 2471, 2612, 2366, 2321, 2361, 2916, 2337, 2529, 2281, 2497, 2491, 2247, 2653, 2207, 2171, 2676, 2385, 2567, 2412, 2522, 2781, 2396, 3188, 3086, 2429, 3034, 2392, 3053, 2567, 3186, 2527, 3191, 2416, 3001, 3026, 2357, 3188, 2504, 2636, 2510, 2556, 3108, 2331, 2557, 2821, 2697, 2366, 2595, 2669, 2492, 2353, 2551, 2385, 2591, 2394, 2916, 3061, 2332, 2820, 2778, 3011, 2623, 2452, 2373, 2891, 3053, 2447, 2575, 2817, 2352, 2713, 2782, 2774, 2731, 2308, 2356, 2709, 2236, 2281, 2346, 2215, 2306, 2910, 2301, 2623, 2487, 2285, 2366, 3234, 3363, 2242, 3111, 2467, 2372, 2191, 2521, 2407, 2494, 2487, 2363, 3194, 3611, 2288, 2566, 2678, 2511, 2639, 2286, 2308, 2467, 2781, 2411, 2411, 2383, 2296, 3035, 2457, 2507, 2281, 3048, 2396, 2497, 2587, 2403, 2282, 2400, 2876, 2377, 2491, 2308, 2471, 2639, 2559, 2616, 2243, 2171, 2679, 2347, 2627, 2387, 2548, 2612, 2536, 3296, 3251, 2544, 3161, 2544, 3026, 2605, 3201, 2637, 3289, 2516, 3187, 3197, 2487, 3336, 2616, 2723, 2568, 2557, 3107, 2332, 2563, 2821, 2671, 2367, 2596, 2631, 2518, 2326, 2551, 2393, 2592, 2402, 2917, 3060, 2331, 2808, 2751, 2780, 2626, 2452, 2371, 2891, 3053, 2446, 2585, 2781, 2622, 2710, 2782, 2783, 2731, 2306, 2356, 2724, 2237, 2296, 2347, 2233, 2307, 2915, 2302, 2613, 2486, 2277, 2366, 3239, 3376, 2242, 3114, 2467, 2373, 2191, 2530, 2406, 2580, 2552, 2465, 3322, 3737, 2432, 2676, 2710, 2586, 2657, 2312, 2282, 2498, 2757, 2425, 2411, 2385, 2296, 3023, 2456, 2494, 2282, 3045, 2397, 2495, 2587, 2391, 2281, 2398, 2921, 2336, 2531, 2281, 2499, 2466, 2273, 2616, 2245, 2171, 2678, 2346, 2605, 2386, 2548, 2757, 2421, 3156, 3119, 2428, 2996, 2430, 3027, 2592, 3162, 2526, 3191, 2516, 3186, 3187, 2486, 3328, 2616, 2675, 2542, 2656, 2905, 2487, 2667, 2822, 2656, 2366, 2585, 2631, 2515, 2326, 2588, 2361, 2630, 2361, 2955, 3048, 2331, 2810, 2751, 2872, 2601, 2495, 2346, 2929, 3053, 2446, 2576, 2782, 2611, 2671, 2821, 2774, 2731, 2308, 2356, 2713, 2237, 2287, 2347, 2232, 2307, 2929, 2301, 2613, 2487, 2274, 2366, 3222, 3360, 2242, 3191, 2466, 2378, 2191, 2569, 2246, 2496, 2486, 2352, 3156, 3637, 2282, 2566, 2692, 2512, 2655, 2287, 2308, 2466, 2781, 2386, 2436, 2346, 2320, 3066, 2481, 2466, 2281, 3063, 2397, 2509, 2586, 2392, 2281, 2386, 2877, 2374, 2491, 2321, 2472, 2505, 2246, 2643, 2207, 2199, 2637, 2371, 2566, 2412, 2522, 2782, 2396, 3189, 3126, 2391, 3034, 2391, 3072, 2593, 3162, 2551, 3166, 2415, 3001, 3002, 2394, 3157, 2506, 2636, 2511, 2556, 3109, 2354, 2531, 2846, 2632, 2390, 2556, 2656, 2492, 2363, 2552, 2400, 2591, 2400, 2916, 3021, 2359, 2781, 2778, 2764, 2626, 2452, 2372, 2929, 3026, 2486, 2551, 2819, 2561, 2699, 2781, 2763, 2756, 2281, 2382, 2686, 2262, 2256, 2383, 2192, 2346, 2887, 2339, 2587, 2512, 2246, 2392, 3196, 3361, 2242, 3086, 2427, 2347, 2228, 2586, 2283, 2457, 2526, 2327, 3182, 3638, 2246, 2591, 2651, 2535, 2617, 2313, 2282, 2500, 2756, 2425, 2411, 2389, 2296, 3093, 2456, 2499, 2281, 3191, 2525, 2527, 2543, 2366, 2317, 2361, 2914, 2336, 2534, 2281, 2498, 2466, 2271, 2616, 2231, 2171, 2661, 2346, 2592, 2386, 2557, 2756, 2447, 3198, 3087, 2418, 2996, 2414, 2946, 2604, 3202, 2527, 3206, 2391, 3028, 3029, 2356, 3181, 2467, 2733, 2471, 2579, 3107, 2332, 2570, 2821, 2681, 2367, 2588, 2631, 2515, 2326, 2576, 2361, 2619, 2361, 2940, 3061, 2331, 2820, 2752, 2801, 2601, 2478, 2346, 2914, 3053, 2446, 2576, 2782, 2594, 2671, 2818, 2736, 2731, 2319, 2356, 2713, 2237, 2281, 2347, 2227, 2307, 2925, 2301, 2629, 2486, 2272, 2366, 3219, 3337, 2242, 3130, 2466, 2386, 2191, 2523, 2407, 2555, 2486, 2354, 3156, 3644, 2291, 2567, 2690, 2512, 2642, 2286, 2305, 2466, 2802, 2387, 2449, 2346, 2335, 3066, 2483, 2466, 2309, 3054, 2396, 2510, 2586, 2406, 2281, 2386, 2876, 2360, 2491, 2305, 2471, 2491, 2246, 2642, 2206, 2203, 2637, 2387, 2567, 2424, 2521, 2783, 2397, 3181, 3113, 2391, 3090, 2391, 3050, 2567, 3161, 2565, 3166, 2430, 3001, 3027, 2382, 3157, 2492, 2636, 2493, 2556, 2898, 2331, 2567, 2863, 2631, 2406, 2556, 2657, 2491, 2352, 2552, 2385, 2592, 2389, 2916, 3047, 2367, 2781, 2791, 2764, 2640, 2452, 2373, 2891, 3094, 2483, 2551, 2818, 2587, 2715, 2782, 2763, 2755, 2281, 2391, 2686, 2279, 2256, 2385, 2191, 2307, 2912, 2324, 2587, 2520, 2246, 2407, 3271, 3443, 2242, 3118, 2435, 2346, 2216, 2586, 2270, 2456, 2514, 2327, 3187, 3651, 2247, 2606, 2652, 2540, 2616, 2310, 2281, 2491, 2757, 2411, 2412, 2370, 2297, 3064, 2456, 2504, 2281, 3135, 2423, 2472, 2609, 2367, 2319, 2362, 2917, 2337, 2531, 2282, 2499, 2466, 2272, 2617, 2235, 2172, 2661, 2347, 2590, 2386, 2553, 2756, 2438, 3196, 3086, 2418, 2996, 2415, 3027, 2603, 3199, 2527, 3206, 2392, 3028, 3024, 2357, 3263, 2466, 2675, 2471, 2596, 3081, 2331, 2555, 2821, 2665, 2366, 2602, 2632, 2529, 2326, 2577, 2361, 2616, 2362, 2950, 3060, 2332, 2822, 2752, 3038, 2601, 2477, 2346, 2924, 3066, 2446, 2589, 2781, 2616, 2671, 2806, 2769, 2731, 2320, 2356, 2736, 2237, 2284, 2347, 2215, 2307, 2920, 2301, 2630, 2486, 2285, 2367, 3222, 3358, 2241, 3122, 2467, 2385, 2192, 2535, 2246, 2484, 2486, 2353, 3156, 3640, 2285, 2566, 2691, 2512, 2644, 2287, 2306, 2466, 2780, 2387, 2436, 2346, 2321, 2997, 2488, 2467, 2319, 3065, 2397, 2498, 2587, 2417, 2282, 2398, 2876, 2375, 2491, 2320, 2471, 2491, 2246, 2638, 2206, 2198, 2636, 2371, 2566, 2410, 2521, 2790, 2396, 3196, 3114, 2391, 3094, 2392, 3053, 2566, 3198, 2566, 3167, 2431, 3002, 3028, 2383, 3156, 2490, 2637, 2496, 2556, 2915, 2332, 2567, 2861, 2632, 2394, 2559, 2660, 2492, 2355, 2551, 2395, 2592, 2388, 2916, 3046, 2368, 2781, 2790, 3011, 2639, 2451, 2373, 2891, 3027, 2484, 2551, 2820, 2562, 2709, 2782, 2764, 2758, 2281, 2387, 2686, 2276, 2257, 2387, 2191, 2337, 2886, 2330, 2587, 2514, 2246, 2392, 3271, 3362, 2242, 3086, 2446, 2347, 2230, 2496, 2433, 2531, 2577, 2326, 3193, 3649, 2246, 2606, 2651, 2536, 2616, 2313, 2281, 2493, 2756, 2410, 2412, 2373, 2297, 3099, 2457, 2495, 2281, 3061, 2424, 2472, 2613, 2367, 2318, 2361, 2916, 2336, 2530, 2281, 2497, 2467, 2272, 2616, 2238, 2172, 2674, 2347, 2605, 2386, 2552, 2756, 2421, 3180, 3086, 2414, 2996, 2418, 3027, 2598, 3202, 2526, 3205, 2391, 3028, 3027, 2357, 3256, 2466, 2660, 2471, 2582, 3116, 2331, 2569, 2821, 2672, 2367, 2586, 2631, 2519, 2326, 2577, 2362, 2615, 2361, 2940, 3060, 2332, 2821, 2752, 2798, 2601, 2479, 2346, 2917, 2986, 2446, 2576, 2781, 2612, 2671, 2819, 2736, 2731, 2321, 2357, 2712, 2237, 2283, 2346, 2227, 2306, 2926, 2302, 2625, 2486, 2276, 2366, 3222, 3337, 2241, 3125, 2466, 2389, 2192, 2524, 2406, 2482, 2486, 2359, 3156, 3655, 2285, 2567, 2678, 2511, 2640, 2287, 2316, 2466, 2796, 2387, 2451, 2347, 2322, 3066, 2482, 2466, 2306, 3046, 2396, 2497, 2586, 2397, 2281, 2399, 2876, 2376, 2491, 2310, 2471, 2494, 2247, 2652, 2206, 2211, 2637, 2386, 2567, 2413, 2521, 2782, 2397, 3189, 3126, 2391, 3034, 2391, 3057, 2567, 3187, 2558, 3166, 2429, 3001, 3040, 2383, 3157, 2492, 2881, 2497, 2557, 2891, 2331, 2561, 2853, 2631, 2406, 2567, 2669, 2491, 2353, 2551, 2386, 2591, 2388, 2917, 3046, 2357, 2781, 2787, 2764, 2639, 2452, 2384, 2891, 2976, 2472, 2551, 2805, 2587, 2696, 2781, 2763, 2767, 2282, 2396, 2687, 2275, 2256, 2372, 2191, 2306, 2911, 2337, 2586, 2526, 2246, 2406, 3197, 3362, 2242, 3115, 2462, 2347, 2229, 2497, 2444, 2456, 2512, 2326, 3182, 3612, 2246, 2593, 2651, 2539, 2616, 2319, 2281, 2495, 2757, 2426, 2412, 2375, 2296, 3022, 2457, 2503, 2282, 3065, 2396, 2511, 2612, 2366, 2307, 2362, 2908, 2337, 2532, 2281, 2537, 2467, 2272, 2616, 2232, 2171, 2668, 2347, 2605, 2387, 2559, 2757, 2425, 3156, 3112, 2423, 2996, 2430, 3026, 2607, 3103, 2527, 3111, 2391, 3032, 3002, 2399, 3195, 2467, 2809, 2471, 2586, 3082, 2357, 2532, 2853, 2671, 2366, 2596, 2631, 2520, 2326, 2577, 2361, 2624, 2361, 2958, 3060, 2331, 2808, 2751, 2917};
    #endif

    #if _sha_preread_
    int exec_time_arr[100]= {3919, 37564, 37542, 30610, 24499, 41471, 2954, 40353, 15348, 40958, 23220, 16324, 7703, 13195, 1948, 10789, 20515, 15421, 26518, 12946, 13756, 42184, 15798, 33647, 20506, 8332, 6963, 7887, 25303, 200, 39935, 37497, 42110, 20841, 16375, 24726, 4968, 25115, 1460, 22605, 44394, 32324, 11575, 20061, 33463, 27937, 24149, 38293, 19386, 28401, 34294, 35836, 22330, 21575, 34644, 44949, 14848, 2915, 14678, 11016, 20785, 36849, 6750, 10947, 41773, 19597, 41474, 39990, 18587, 4628, 43990, 40234, 3770, 20936, 25177, 41979, 22604, 19162, 27884, 9877, 22735, 20469, 35099, 31717, 11756, 20974, 41259, 23430, 12314, 21001, 18636, 19824, 11104, 2409, 28843, 27611, 3665, 20438, 32051, 5364};
    #endif

    #if _rijndael_preread_
    int exec_time_arr[100]= {7838, 8705, 17832, 10335, 2682, 16988, 14069, 10011, 14943, 4187, 2681, 180, 16040, 7798, 8102, 14472, 3680, 3066, 8010, 15120, 8991, 3112, 14097, 2656, 11869, 7136, 8978, 726, 16250, 4511, 8194, 12323, 12628, 16821, 16996, 183, 13365, 9615, 12802, 11976, 8345, 12716, 4255, 4910, 2871, 6909, 1102, 10334, 1807, 13875, 12151, 6164, 10150, 11885, 11235, 14882, 3113, 8660, 9281, 3713, 12276, 41, 3284, 3743, 14045, 16831, 3954, 11058, 11864, 8833, 8782, 11852, 549, 16372, 25722, 3519, 9223, 15294, 17660, 10935, 6163, 2217, 7976, 14335, 14595, 15167, 6300, 9701, 3412, 15990, 11450, 15869, 15322, 6486, 4305, 16606, 624, 3521, 13997, 5629};
    #endif

    #if _xpilot_slice_
    int exec_time_arr[396]= {13, 3, 3, 2, 2, 3, 2, 3, 2, 3, 2, 2, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 117, 3, 3, 3, 2, 3, 3, 2, 3, 3, 4, 3, 3, 3, 3, 2, 3, 2, 2, 2, 2, 3, 2, 3, 3, 2, 3, 3, 2, 2, 3, 2, 4, 3, 2, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 2, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 2, 2, 3, 4, 2, 2, 3, 2, 1493, 565, 350, 1449, 186, 164, 162, 160, 161, 159, 159, 158, 175, 159, 167, 160, 164, 159, 164, 162, 161, 162, 164, 162, 157, 158, 157, 157, 155, 655, 247, 229, 226, 233, 224, 227, 221, 226, 225, 224, 217, 222, 232, 259, 244, 244, 246, 243, 254, 260, 248, 255, 263, 274, 271, 256, 271, 542, 332, 430, 326, 326, 317, 320, 319, 322, 309, 318, 316, 320, 331, 318, 318, 332, 332, 315, 319, 309, 312, 315, 322, 329, 331, 329, 401, 734, 420, 412, 415, 426, 425, 424, 454, 435, 406, 400, 393, 405, 391, 387, 386, 394, 386, 381, 397, 385, 387, 387, 389, 400, 395, 409, 400, 723, 463, 459, 448, 454, 439, 430, 429, 424, 430, 418, 416, 425, 422, 434, 424, 430, 431, 433, 458, 454, 482, 456, 459, 446, 461, 469, 463, 462, 458, 464, 469, 461, 456, 454, 453, 450, 459, 459, 450, 454, 461, 442, 434, 443, 443, 443, 443, 441, 440, 440, 438, 436, 457, 453, 439, 435, 458, 527, 424, 433, 445, 438, 472, 419, 411, 403, 408, 409, 420, 419, 416, 418, 409, 408, 412, 407, 435, 420, 412, 418, 429, 419, 412, 439, 409, 408, 405, 409, 412, 403, 419, 425, 433, 421, 430, 429, 425, 435, 428, 421, 438, 469, 470, 468, 483, 466, 462, 455, 451, 441, 448, 441, 446, 444, 444, 448, 450, 451, 454, 491, 458, 459, 457, 458, 463, 466, 447, 443, 455, 449, 445, 456, 457, 451, 462, 469, 573, 512, 503, 498, 475, 479, 473, 519, 443, 432, 436, 421, 409, 406, 461, 422, 439, 444, 455, 462, 451, 506, 491, 474, 444, 451, 442, 433, 448, 431, 420, 411, 423, 406, 414, 453, 411, 402, 445, 406, 396, 397, 426, 427, 395, 384};
    #endif

    #if _2048_slice_
    int exec_time_arr[165]= {1047, 1061, 938, 1030, 983, 967, 1383, 1083, 984, 980, 28013, 1025, 963, 963, 1331, 1035, 993, 965, 960, 1031, 987, 964, 25341, 1038, 1045, 974, 977, 1068, 993, 962, 965, 1125, 1041, 965, 969, 1031, 997, 969, 969, 1238, 1032, 966, 964, 1073, 1050, 969, 1026, 1219, 1031, 960, 964, 1065, 1054, 965, 968, 1239, 1028, 986, 963, 1078, 1035, 1010, 971, 1281, 1073, 965, 1003, 19060, 1033, 964, 961, 1308, 1075, 964, 996, 18330, 1025, 967, 968, 24749, 1029, 990, 964, 16628, 1030, 974, 979, 26840, 1083, 993, 1004, 16404, 1034, 972, 967, 25898, 1025, 1005, 965, 967, 1034, 969, 964, 27485, 1025, 997, 964, 968, 1025, 973, 983, 24991, 1021, 1004, 971, 989, 1027, 979, 967, 26763, 1050, 1000, 1003, 980, 1036, 978, 968, 22689, 1099, 1014, 966, 963, 1090, 991, 973, 985, 1113, 1019, 976, 967, 1019, 1011, 966, 963, 1168, 1056, 987, 971, 14781, 1085, 977, 978, 28217, 1025, 985, 964, 16371, 1022, 1011, 972, 25995, 1032, 1005, 967, 1013};
    #endif

    #if _curseofwar_slice_
    int exec_time_arr[2002]= {995, 196, 189, 189, 187, 197, 197, 198, 197, 196, 197, 196, 197, 198, 196, 196, 197, 197, 195, 3342, 201, 200, 200, 199, 198, 201, 199, 198, 199, 198, 199, 201, 198, 198, 198, 197, 198, 199, 199, 3327, 197, 202, 200, 200, 199, 199, 201, 200, 199, 200, 199, 200, 200, 200, 199, 199, 199, 198, 201, 3353, 202, 201, 200, 201, 199, 200, 201, 199, 201, 200, 201, 200, 201, 200, 199, 200, 199, 200, 200, 3352, 202, 201, 201, 201, 200, 200, 201, 200, 200, 200, 199, 200, 200, 200, 200, 200, 201, 200, 201, 3383, 206, 202, 202, 201, 201, 203, 202, 201, 201, 202, 201, 200, 201, 201, 200, 200, 201, 202, 200, 3399, 199, 203, 203, 202, 201, 207, 204, 202, 202, 202, 201, 203, 202, 201, 201, 201, 201, 202, 201, 3307, 206, 203, 203, 203, 202, 202, 204, 207, 206, 202, 207, 203, 203, 202, 202, 202, 202, 203, 202, 3375, 205, 205, 204, 203, 203, 203, 203, 203, 204, 202, 203, 202, 202, 204, 203, 202, 203, 203, 202, 3392, 206, 205, 204, 204, 203, 203, 204, 205, 203, 203, 203, 205, 204, 203, 203, 203, 202, 204, 205, 3370, 201, 200, 205, 205, 205, 205, 204, 204, 204, 205, 204, 204, 204, 205, 204, 205, 204, 205, 204, 3429, 209, 206, 207, 206, 205, 206, 206, 205, 206, 205, 205, 205, 205, 205, 207, 205, 206, 204, 206, 3394, 208, 208, 206, 207, 206, 206, 207, 206, 206, 206, 206, 206, 206, 206, 208, 206, 208, 205, 206, 3463, 204, 208, 208, 208, 207, 207, 208, 207, 208, 206, 207, 206, 207, 207, 207, 207, 207, 207, 207, 3404, 207, 209, 209, 209, 208, 208, 210, 211, 208, 211, 208, 207, 207, 208, 208, 209, 208, 208, 209, 3468, 205, 210, 209, 210, 209, 209, 211, 208, 207, 208, 208, 208, 208, 208, 208, 208, 208, 209, 208, 3466, 206, 210, 210, 210, 209, 208, 210, 208, 207, 209, 208, 210, 208, 209, 208, 209, 209, 210, 209, 3478, 211, 211, 210, 210, 208, 210, 210, 209, 209, 209, 209, 210, 210, 209, 210, 208, 209, 209, 209, 3480, 211, 210, 210, 209, 209, 208, 211, 210, 209, 209, 209, 209, 209, 210, 209, 208, 210, 209, 209, 3537, 207, 212, 211, 211, 210, 209, 212, 210, 210, 210, 210, 209, 209, 210, 210, 210, 210, 210, 210, 3559, 213, 212, 215, 211, 211, 210, 212, 211, 211, 210, 211, 211, 211, 211, 211, 211, 210, 210, 211, 3506, 213, 216, 213, 213, 211, 212, 212, 211, 211, 212, 213, 213, 212, 212, 211, 212, 212, 213, 211, 3494, 213, 213, 213, 213, 212, 212, 212, 212, 211, 213, 211, 212, 212, 212, 212, 213, 212, 212, 212, 3507, 213, 214, 213, 213, 212, 212, 213, 212, 212, 215, 212, 211, 212, 212, 212, 212, 212, 211, 213, 3560, 214, 213, 215, 214, 213, 212, 214, 212, 213, 213, 215, 212, 213, 212, 213, 212, 212, 212, 212, 3555, 215, 214, 215, 215, 213, 213, 215, 213, 213, 213, 213, 213, 213, 213, 213, 212, 212, 215, 212, 3541, 216, 215, 215, 215, 215, 213, 214, 242, 216, 215, 214, 214, 214, 214, 213, 214, 213, 214, 214, 3555, 213, 215, 215, 216, 215, 215, 222, 214, 216, 214, 215, 214, 214, 214, 214, 215, 233, 217, 214, 3571, 213, 216, 216, 217, 215, 214, 216, 214, 216, 215, 214, 214, 215, 214, 216, 214, 215, 215, 214, 3599, 217, 216, 215, 216, 217, 215, 216, 215, 215, 215, 214, 214, 215, 214, 215, 214, 214, 215, 215, 3606, 219, 218, 217, 218, 217, 217, 217, 216, 216, 217, 217, 217, 216, 216, 217, 217, 217, 217, 217, 3627, 220, 218, 218, 218, 218, 217, 218, 216, 217, 217, 218, 217, 218, 217, 217, 217, 217, 217, 223, 3632, 221, 219, 224, 218, 217, 217, 218, 217, 220, 219, 218, 218, 217, 218, 218, 217, 217, 217, 217, 3615, 219, 221, 220, 222, 219, 219, 220, 218, 219, 218, 218, 219, 218, 218, 218, 219, 218, 219, 219, 3551, 221, 219, 221, 220, 219, 219, 220, 219, 218, 219, 219, 219, 219, 219, 218, 220, 219, 219, 219, 3601, 217, 221, 221, 221, 219, 220, 220, 219, 220, 219, 219, 220, 220, 220, 219, 220, 219, 219, 219, 3629, 220, 222, 220, 223, 219, 220, 221, 220, 219, 221, 220, 219, 219, 223, 219, 223, 219, 221, 220, 3611, 218, 225, 221, 221, 220, 220, 220, 220, 220, 220, 223, 220, 221, 220, 220, 219, 220, 220, 223, 3541, 218, 222, 222, 223, 220, 221, 222, 221, 220, 221, 220, 221, 220, 221, 220, 221, 220, 221, 220, 3636, 223, 223, 221, 222, 220, 221, 222, 220, 221, 221, 221, 220, 220, 221, 220, 221, 221, 221, 220, 3715, 219, 222, 223, 227, 221, 222, 222, 220, 221, 221, 222, 221, 221, 221, 221, 221, 221, 221, 222, 3708, 220, 223, 223, 223, 222, 222, 223, 222, 221, 224, 222, 223, 222, 223, 221, 223, 224, 223, 222, 3658, 225, 223, 223, 222, 225, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 221, 222, 222, 222, 3686, 223, 225, 225, 224, 223, 224, 223, 224, 224, 223, 223, 222, 223, 223, 223, 222, 223, 222, 222, 3682, 222, 224, 224, 224, 224, 224, 225, 223, 223, 224, 223, 224, 224, 223, 226, 223, 224, 223, 223, 3704, 222, 225, 224, 224, 224, 224, 226, 224, 224, 224, 223, 224, 224, 224, 224, 223, 224, 224, 223, 3696, 221, 226, 224, 226, 224, 226, 226, 224, 225, 225, 224, 224, 224, 224, 224, 224, 223, 224, 224, 3759, 222, 227, 225, 226, 225, 225, 227, 225, 225, 226, 226, 225, 224, 225, 224, 224, 225, 225, 225, 3708, 227, 228, 226, 226, 226, 225, 226, 225, 225, 225, 225, 226, 224, 225, 225, 225, 225, 226, 224, 3701, 224, 228, 227, 226, 225, 226, 226, 226, 226, 225, 226, 226, 226, 226, 226, 225, 225, 227, 225, 3765, 225, 228, 227, 228, 230, 228, 230, 227, 226, 227, 227, 228, 227, 227, 227, 227, 227, 227, 226, 3773, 230, 231, 229, 228, 254, 235, 230, 228, 228, 228, 228, 228, 228, 229, 229, 227, 228, 228, 228, 3749, 226, 230, 228, 228, 228, 227, 229, 228, 228, 229, 227, 228, 227, 228, 228, 228, 228, 228, 228, 3734, 226, 230, 228, 244, 235, 230, 230, 229, 230, 230, 228, 229, 230, 229, 229, 228, 230, 229, 229, 3683, 227, 231, 230, 231, 229, 229, 229, 228, 228, 229, 230, 229, 229, 229, 228, 229, 229, 229, 229, 3794, 229, 230, 229, 230, 228, 230, 229, 228, 229, 229, 230, 228, 229, 229, 229, 228, 229, 229, 229, 3744, 227, 231, 230, 229, 229, 231, 230, 231, 230, 229, 229, 229, 229, 229, 230, 229, 230, 230, 229, 3785, 233, 232, 233, 232, 230, 230, 233, 237, 230, 231, 229, 229, 230, 230, 230, 229, 232, 231, 230, 3786, 229, 233, 231, 232, 231, 231, 234, 230, 230, 231, 230, 231, 232, 230, 231, 230, 231, 230, 231, 3835, 229, 232, 232, 231, 231, 233, 232, 231, 232, 231, 232, 230, 231, 231, 231, 231, 232, 231, 231, 3762, 230, 234, 232, 234, 233, 233, 234, 233, 232, 232, 232, 232, 232, 232, 232, 232, 234, 232, 231, 3827, 231, 235, 233, 234, 233, 233, 233, 232, 233, 234, 232, 233, 232, 232, 232, 233, 233, 233, 233, 3833, 235, 235, 232, 234, 233, 232, 235, 232, 234, 233, 232, 233, 233, 233, 233, 232, 232, 233, 233, 3813, 235, 235, 233, 234, 234, 232, 235, 233, 234, 233, 232, 233, 234, 234, 233, 234, 233, 234, 233, 3807, 237, 236, 234, 235, 235, 234, 234, 234, 234, 234, 234, 234, 234, 236, 234, 234, 234, 234, 233, 3830, 237, 236, 235, 235, 235, 235, 236, 234, 235, 236, 236, 234, 237, 235, 235, 234, 235, 235, 238, 3812, 238, 235, 235, 235, 234, 236, 234, 235, 235, 234, 235, 234, 234, 234, 234, 234, 234, 235, 234, 3820, 238, 238, 235, 237, 236, 235, 236, 235, 235, 236, 235, 235, 237, 236, 235, 235, 235, 235, 234, 3802, 232, 238, 235, 235, 236, 235, 237, 236, 235, 235, 236, 234, 235, 235, 234, 235, 235, 235, 235, 3832, 239, 238, 236, 237, 235, 237, 236, 237, 236, 237, 236, 239, 236, 236, 236, 236, 236, 237, 235, 3858, 239, 238, 236, 237, 236, 236, 236, 236, 237, 237, 235, 235, 235, 236, 236, 236, 236, 236, 236, 3876, 240, 238, 236, 238, 237, 236, 237, 236, 237, 236, 237, 236, 236, 236, 236, 236, 236, 236, 237, 3922, 238, 237, 236, 237, 237, 237, 237, 236, 240, 236, 237, 235, 236, 236, 236, 236, 236, 235, 236, 3851, 240, 240, 237, 238, 237, 237, 238, 237, 238, 237, 237, 237, 237, 236, 236, 237, 238, 236, 237, 3889, 241, 238, 237, 239, 238, 237, 238, 237, 238, 237, 236, 237, 237, 237, 236, 237, 238, 237, 237, 3944, 235, 240, 239, 239, 238, 242, 242, 239, 238, 238, 237, 238, 238, 238, 238, 238, 239, 237, 238, 3898, 241, 240, 239, 239, 238, 239, 240, 241, 238, 239, 238, 239, 238, 240, 239, 239, 238, 238, 238, 3907, 237, 241, 239, 241, 239, 239, 239, 238, 239, 239, 238, 238, 239, 239, 239, 238, 240, 239, 239, 3958, 239, 240, 238, 240, 240, 238, 239, 239, 238, 239, 238, 238, 238, 239, 239, 239, 239, 239, 238, 3876, 244, 241, 239, 240, 239, 240, 240, 239, 240, 239, 239, 239, 239, 240, 240, 239, 239, 239, 239, 3932, 242, 242, 240, 244, 241, 239, 241, 241, 241, 240, 239, 243, 240, 241, 239, 240, 240, 240, 240, 3870, 243, 242, 242, 242, 241, 241, 242, 240, 241, 241, 240, 241, 240, 241, 240, 241, 240, 241, 241, 3867, 243, 242, 241, 244, 241, 241, 242, 242, 241, 241, 240, 241, 240, 241, 241, 241, 240, 240, 240, 3900, 243, 243, 241, 243, 240, 241, 243, 241, 241, 241, 241, 240, 240, 241, 240, 241, 241, 241, 241, 3863, 239, 243, 240, 241, 240, 241, 241, 241, 241, 241, 240, 240, 241, 242, 240, 244, 241, 241, 240, 3956, 238, 243, 242, 242, 241, 241, 242, 241, 240, 240, 241, 240, 241, 240, 241, 241, 241, 241, 240, 3875, 238, 243, 241, 241, 242, 240, 242, 241, 241, 241, 240, 240, 241, 241, 240, 240, 241, 240, 240, 3954, 240, 244, 242, 244, 242, 241, 244, 241, 242, 242, 242, 242, 241, 245, 242, 244, 242, 242, 242, 3962, 239, 244, 242, 243, 242, 243, 243, 241, 241, 242, 242, 242, 245, 242, 241, 243, 242, 242, 242, 3979, 246, 244, 242, 242, 242, 242, 244, 242, 243, 243, 244, 243, 243, 242, 242, 243, 243, 242, 242, 3983, 246, 245, 244, 244, 242, 244, 244, 243, 242, 248, 242, 244, 243, 243, 243, 243, 244, 243, 243, 3942, 247, 245, 244, 246, 243, 244, 244, 243, 243, 243, 243, 243, 244, 243, 247, 243, 243, 243, 243, 3975, 241, 244, 243, 246, 243, 243, 244, 244, 244, 244, 243, 243, 244, 243, 246, 243, 243, 243, 242, 4011, 247, 245, 243, 244, 243, 243, 245, 244, 244, 243, 244, 243, 244, 244, 242, 244, 245, 243, 243, 3900, 248, 245, 244, 245, 243, 248, 245, 245, 243, 244, 243, 243, 243, 243, 244, 243, 244, 244, 244, 3943, 240, 245, 244, 245, 243, 243, 244, 243, 244, 243, 243, 243, 244, 244, 244, 244, 244, 244, 246, 3957, 249, 248, 244, 246, 244, 244, 245, 245, 245, 244, 244, 245, 245, 244, 245, 246, 245, 246, 244, 3951, 242, 246, 244, 245, 244, 245, 245, 246, 245, 245, 244, 245, 245, 244, 244, 245, 245, 246, 245, 3951, 249, 247, 245, 247, 245, 245, 246, 246, 244, 245, 244, 244, 248, 244, 245, 245, 245, 244, 244, 3985, 243, 246, 245, 245, 245, 245, 246, 245, 245, 245, 244, 246, 244, 245, 245, 248, 245, 246, 245, 3941, 244, 247};
    #endif

    #if _uzbl_
    int exec_time_arr[242]= {546, 456, 533, 454, 456, 520, 464, 530, 464, 469, 525, 471, 38, 599, 439, 394, 524, 432, 463, 708, 463, 448, 427, 485, 18, 442, 442, 418, 490, 557, 501, 20, 461, 468, 439, 425, 68, 336, 704, 181, 226, 691, 452, 535, 496, 489, 466, 452, 427, 462, 455, 616, 641, 457, 478, 432, 26056, 785, 470, 643, 21, 25319, 28, 1048, 501, 908, 775, 531, 660, 485, 19, 478, 498, 454, 433, 69, 361, 894, 169, 195, 571, 731, 521, 512, 500, 477, 488, 438, 559, 466, 25630, 854, 680, 21, 26199, 36, 1248, 498, 825, 473, 503, 550, 554, 20, 485, 439, 425, 171, 318, 850, 203, 205, 483, 734, 472, 508, 545, 440, 683, 463, 26924, 888, 554, 636, 459, 881, 508, 486, 621, 478, 18, 477, 544, 457, 433, 158, 321, 927, 177, 209, 810, 662, 463, 26359, 929, 525, 635, 462, 1395, 516, 555, 597, 479, 21, 550, 488, 444, 426, 160, 377, 872, 177, 190, 562, 499, 490, 26561, 668, 443, 591, 437, 743, 466, 499, 516, 488, 18, 468, 437, 435, 160, 356, 916, 180, 219, 469, 724, 527, 449, 27237, 982, 309, 620, 469, 489, 568, 203, 544, 440, 461, 562, 207, 531, 530, 436, 572, 197, 570, 455, 448, 542, 197, 526, 437, 444, 551, 199, 515, 446, 435, 549, 37, 538, 435, 37, 524, 422, 37, 505, 487, 35, 585, 429, 35, 502, 435, 42, 499, 424, 547, 481, 66};
    #endif   
//define exectuion time array for oracle
#else //LITTLE

#endif


#endif
